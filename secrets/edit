#!/usr/bin/env python3.8

import itertools
import os
import pathlib
import re
import subprocess
import sys
import tempfile

from argparse import ArgumentParser
from pathlib import Path

def get_data_if_file_exists(filename):
    if filename.is_file():
        return subprocess.check_output(['gpg', '-d', str(filename)])
    else:
        return b""

def edit(data):
    editor = os.getenv('EDITOR', 'vim')

    with tempfile.TemporaryDirectory() as tmpdir:
        tmpdir = Path(tmpdir)

        secret_file = tmpdir / 'secret'
        secret_file.write_bytes(data)

        subprocess.check_call([editor, str(secret_file.absolute())])

        return secret_file.read_bytes()

def get_key(keyfile):
    fingerprint_text = subprocess.check_output(
        ['gpg', '--with-fingerprint', str(keyfile)]).decode('US-ASCII')
    re_fp = re.compile("Key fingerprint = ([A-F0-9 ]*)")
    return re_fp.search(fingerprint_text).group(1).replace(' ', '')

def main(args):
    os.umask(0o0077)

    parser = ArgumentParser(
    description="""
        Edit each ENCRYPTED_FILE using $EDITOR, encrypting with all the GPG
        keys in ../keys.
        """)
    parser.add_argument('--re-encrypt', dest='re_encrypt',
                        action='store_true',
                        help="""Force re-encryption, good for when the key
                        list changes""")
    parser.add_argument('ENCRYPTED_FILE', nargs='+')
    options = parser.parse_args(args)
    if len(args) < 1:
        parser.print_help()
        return 1

    for filename in options.ENCRYPTED_FILE:
        filename =Path(filename)

        data = get_data_if_file_exists(filename)

        updated_data = edit(data)

        if data == updated_data and not options.re_encrypt:
            # No change, no need to re-encrypt
            continue

        encrypt_command = ['gpg', '-e', '-a', '--always-trust']
        encrypt_command.extend(itertools.chain.from_iterable(
            ('-r', get_key(keyfile)) for keyfile in
            (Path(__file__).absolute().parent.parent / 'keys')
                .glob('*.asc')))
        encrypted = subprocess.check_output(
            encrypt_command, input=updated_data).decode('US-ASCII')

        filename.write_text(encrypted)

if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
